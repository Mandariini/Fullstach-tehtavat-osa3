{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Persons.js","services/personsService.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","filter","handleFilterChange","Persons","persons","person","name","toLowerCase","includes","map","key","number","onClick","deleteP","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","messageType","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","setMessageType","useEffect","personsService","initialPersons","updateNumber","namej","console","log","personToUpdate","find","p","changedInfo","returnedPerson","setTimeout","catch","error","event","target","preventDefault","some","window","confirm","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d5f7dc8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return(\r\n    <form onSubmit={props.addName}>\r\n        <div>name: <input value={props.newName} onChange={props.handleNameChange} /></div>\r\n        <div>number: <input value={props.newNumber} onChange={props.handleNumberChange} /></div>\r\n        <div><button type=\"submit\">add</button></div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>filter shown with <input value={props.filter} onChange={props.handleFilterChange} /></div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Persons = (props) => {\r\n    return (\r\n        props.persons.filter(person => person.name.toLowerCase().includes(props.filter.toLowerCase())).map(person =>\r\n            <div key={person.name} >\r\n                {person.name} {person.number} <button onClick={() => props.deleteP(person.id)}>delete</button>\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default {getAll, create, update, deletePerson}","import React from 'react'\r\n\r\nconst Notification = ({ message, messageType }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    if (messageType === 'info') {\r\n        return (\r\n            <div className=\"message\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (messageType === 'error')\r\n        return (\r\n            <div className=\"error\">\r\n                {message}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport personsService from './services/personsService'\nimport Notification from './components/Notification'\nimport './App.css'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('a new name')\n    const [newNumber, setNewNumber] = useState('phone number')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n    const [messageType, setMessageType] = useState('info')\n\n    useEffect(() => {\n        personsService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\n\n    const addName = (event) => {\r\n        event.preventDefault()\r\n        const person = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n\r\n        if (persons.some(person => person.name === newName)) {\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                updateNumber(newName)\r\n            }\r\n        }\r\n\r\n        else if (!(persons.some(person => person.name === newName))) {\r\n            personsService\r\n                .create(person)\r\n                .then(returnedPerson => {\r\n                    setPersons(persons.concat(returnedPerson))\r\n                })\r\n            setMessageType('info')\r\n            setMessage(`Added ${newName}`)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n        }\r\n\r\n        setNewName('')\r\n        setNewNumber('')\r\n    }\n\n    const deletePersonInfo = (id) => {\n        const person = persons.find(p => p.id === id)\r\n\r\n        if (window.confirm(`Delete ${person.name} ?`)) {\r\n            personsService\r\n                .deletePerson(person.id)\r\n                .then(response => {\r\n                    setPersons(persons.filter(p => p.id !== id))\r\n                })\r\n            setMessageType('info')\r\n            setMessage(`Deleted ${person.name}`)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\n\n    const updateNumber = (namej) => {\n        console.log(namej)\n        const personToUpdate = persons.find(p => p.name === namej)\r\n        const changedInfo = {...personToUpdate, number: newNumber}\r\n\r\n        personsService\r\n            .update(personToUpdate.id, changedInfo)\r\n            .then(returnedPerson => {\r\n                setPersons(persons.map(person => person.id !== personToUpdate.id ? person : returnedPerson))\r\n                setMessageType('info')\r\n                setMessage(`Updated number of ${personToUpdate.name}`)\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            })\r\n            .catch(error => {\r\n                setMessageType('error')\r\n                setMessage(`'${personToUpdate.name}' was already deleted from server`)\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            setPersons(persons.filter(p => p.id !== personToUpdate.id))\r\n            })\r\n    }\n\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\r\n    }\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\r\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={message} messageType={messageType} />\n            <Filter filter={filter} handleFilterChange={handleFilterChange} />\n\n            <h2>Add a new</h2>\n            <PersonForm\n                addName={addName}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n            />\n            <h3>Numbers</h3>\n            <Persons\n                persons={persons}\n                filter={filter}\n                deleteP={deletePersonInfo}\n            />\n        </div>\n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}